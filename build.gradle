plugins {
    id 'java'
    id 'org.jetbrains.intellij.platform' version '2.7.0'
}

group = 'com.spectra.intellij.ai'
version = '1.0.24'

// Dynamic version from Git tag or environment variable
def getVersionName() {
    def tagVersion = System.getenv("VERSION")
    if (tagVersion) {
        return tagVersion
    }
    
    try {
        def stdout = new ByteArrayOutputStream()
        exec {
            commandLine 'git', 'describe', '--tags', '--dirty', '--always'
            standardOutput = stdout
        }
        return stdout.toString().trim()
    } catch (Exception e) {
        return version
    }
}

version = project.hasProperty('version') ? project.property('version') : getVersionName()

repositories {
    mavenCentral()
    intellijPlatform {
        defaultRepositories()
    }
}

dependencies {
    intellijPlatform {
        intellijIdeaUltimate('2025.1.1')
        bundledPlugin('org.jetbrains.plugins.terminal')
        pluginVerifier()
        zipSigner()
        instrumentationTools()
    }

    implementation 'com.squareup.okhttp3:okhttp:4.12.0'
    implementation 'com.google.code.gson:gson:2.10.1'
    implementation 'org.apache.commons:commons-lang3:3.12.0'

    testImplementation 'org.junit.jupiter:junit-jupiter:5.10.0'
    testImplementation 'org.mockito:mockito-core:5.5.0'
}

intellijPlatform {
    pluginConfiguration {
        version = project.version
        changeNotes = provider {
            def changelogFile = file("CHANGELOG.md")
            if (changelogFile.exists()) {
                return changelogFile.text
            }
            return "Version ${project.version}"
        }
        ideaVersion {
            sinceBuild = '251'
        }
    }
    
    signing {
        certificateChain = providers.environmentVariable("CERTIFICATE_CHAIN")
        privateKey = providers.environmentVariable("PRIVATE_KEY")
        password = providers.environmentVariable("PRIVATE_KEY_PASSWORD")
    }
    
    publishing {
        token = providers.environmentVariable("PUBLISH_TOKEN")
    }
    
    pluginVerification {
        ides {
            ide('IC', '2023.3.6')
        }
    }
}

tasks.withType(JavaCompile) {
    sourceCompatibility = '17'
    targetCompatibility = '17'
}

test {
    useJUnitPlatform()
}

// Custom task to prepare distribution files
task preparePluginRepository(type: Copy, dependsOn: buildPlugin) {
    description = 'Prepare plugin repository files for custom update server'
    group = 'distribution'
    
    from buildPlugin.outputs.files
    into file("$buildDir/repository/plugins")
    
    doLast {
        def pluginJar = buildPlugin.outputs.files.singleFile
        def repositoryDir = file("$buildDir/repository")
        def updateXmlFile = file("$repositoryDir/updatePlugins.xml")
        
        // Create updatePlugins.xml
        updateXmlFile.parentFile.mkdirs()
        
        // Get GitHub repository info from git remote
        def gitRemote = ""
        try {
            def remoteOutput = new ByteArrayOutputStream()
            exec {
                commandLine 'git', 'remote', 'get-url', 'origin'
                standardOutput = remoteOutput
            }
            gitRemote = remoteOutput.toString().trim()
                .replace("git@github.com:", "https://github.com/")
                .replace(".git", "")
        } catch (Exception e) {
            gitRemote = "https://github.com/spectrakr/spectra-jira-ai-intellij-plugin"
        }
        
        updateXmlFile.text = """<?xml version="1.0" encoding="UTF-8"?>
<plugins>
    <plugin id="com.spectra.jira.ai" 
            url="${gitRemote}/releases/latest/download/${pluginJar.name}" 
            version="${project.version}">
        <idea-version since-build="251" />
        <name>Spectra Jira AI</name>
        <description><![CDATA[
            IntelliJ IDEA plugin for Jira integration with AI capabilities.
            
            Features include:
            - Jira issue creation with sprint selection
            - Dynamic issue type selection
            - Automatic configuration persistence
            - Integration with Jira Cloud API v3
            
            Configure your Jira connection in Settings > Tools > Spectra Jira Settings
        ]]></description>
        <change-notes><![CDATA[Version ${project.version} release]]></change-notes>
        <vendor>Spectra</vendor>
        <depends>com.intellij.modules.platform</depends>
        <depends>com.intellij.modules.java</depends>
    </plugin>
</plugins>"""
        
        println "Repository prepared in: $repositoryDir"
        println "Plugin file: plugins/${pluginJar.name}"
        println "Version: ${project.version}"
    }
}

// Task to create GitHub release assets
task prepareRelease(type: Copy, dependsOn: [buildPlugin, preparePluginRepository]) {
    description = 'Prepare files for GitHub release'
    group = 'distribution'
    
    from buildPlugin.outputs.files
    from file("$buildDir/repository")
    into file("$buildDir/release")
}